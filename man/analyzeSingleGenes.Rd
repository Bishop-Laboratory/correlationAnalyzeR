% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyzeSingleGenes.R
\name{analyzeSingleGenes}
\alias{analyzeSingleGenes}
\title{Analyze Single Genes}
\usage{
analyzeSingleGenes(
  genesOfInterest,
  GSEA_Type = c("simple"),
  Sample_Type = "normal",
  Tissue = "all",
  crossCompareMode = FALSE,
  nperm = 2000,
  TERM2GENE = NULL,
  whichCompareGroups = c("all", "normal", "cancer"),
  outputPrefix = "CorrelationAnalyzeR_Output",
  sampler = FALSE,
  runGSEA = TRUE,
  topPlots = TRUE,
  returnDataOnly = TRUE,
  pool = NULL,
  corrMat = NULL,
  corrMat_label = "User-Supplied",
  makePool = FALSE
)
}
\arguments{
\item{genesOfInterest}{A vector of genes to analyze.}

\item{GSEA_Type}{Character vector listing the gene set databases to use.
Options are listed in correlationAnalyzeR::pathwayCategories --
See details of ?getTERM2GENE for more info.}

\item{Sample_Type}{Type of RNA Seq samples used to create correlation data.
Either "all", "normal", or "cancer". Can be a single value for all genes,
or a vector corresponding to genesOfInterest. Default: "normal"}

\item{Tissue}{Which tissue type should gene correlations be derived from?
Can be a single value for all genes, or a vector corresponding to genesOfInterest.
Run getTissueTypes() to see available tissues. Default: "all"}

\item{crossCompareMode}{Instead of normal single gene analysis, analyzeSingleGenes() will generate
correlations for a single gene across all tissue-disease groups. GSEA will not be run.
analyzeSingleGenes() will only consider user input for returnDataOnly, whichCompareGroups,
outputPrefix, and genesOfInterest.}

\item{nperm}{Number of permutations to run in GSEA. Default: 2000}

\item{TERM2GENE}{Mapping of geneset IDs to gene names. If not supplied, it will be
generated automatically. Only applicable if GSEA is to be run. TERM2GENE objects
can be generated manually using the getTERM2GENE() function.}

\item{whichCompareGroups}{For crossCompareMode, select "all", "normal", or "cancer"
to analyze correlations from the corresponding groups. Default: "all".}

\item{outputPrefix}{Prefix for saved files -- the directory name to store output files in.
This is ignored unless returnDataOnly is FALSE. Default: "CorrelationAnalyzeR_Output"}

\item{sampler}{Logical. If TRUE, will only return 100,000 random genesets from either
simple or complex TERM2GENEs. Useful for reducing GSEA computational burden.}

\item{runGSEA}{If TRUE will run GSEA using gene correlation values. Default: TRUE.}

\item{topPlots}{Logical. If TRUE, myGSEA() will build gsea plots for top correlated genesets.
Default: TRUE.}

\item{returnDataOnly}{if TRUE will return result list object
and will not generate any folders or files. Default: TRUE.}

\item{pool}{an object created by pool::dbPool to accessing SQL database.
It will be created if not supplied as long as makePool is TRUE.}

\item{corrMat}{A custom correlation matrix generated by generateCorrelations()
to use instead of pre-supplied databases. If supplied, "Tissue" and "Sample_Type" are ignored.}

\item{corrMat_label}{If corrMat is provided, this label will be used for plotting. Default: "User-Supplied".}

\item{makePool}{Logical. Should a database pool be created if one is not supplied? Default: FALSE.}
}
\value{
A named list of correlation values, corGSEA results,
and visualizations for each gene of interest.
}
\description{
Obtains correlations and corGSEA results for each gene of interest.
}
\details{
analyzeSingleGenes() performs most of the core tasks for analyzing gene function
via co-expression correlations. Please view the vignette for more detail about this function,
including the structure of the ouput data list.
}
\examples{
genesOfInterest <- c("ATM", "SLC7A11")
res <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = genesOfInterest,
                              returnDataOnly = TRUE,
                              GSEA_Type = "simple",
                              Sample_Type = c("normal", "cancer"),
                              Tissue = c("respiratory", "pancreas"))

genesOfInterest <- c("BRCA1")
res <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = genesOfInterest,
                              GSEA_Type = "simple", returnDataOnly = TRUE,
                              crossCompareMode = TRUE,
                              whichCompareGroups = "normal")

}
